{"version":3,"sources":["index.js"],"names":["document","body","classList","toggle","window","addEventListener","observer","IntersectionObserver","entries","forEach","entry","id","target","getAttribute","intersectionRatio","querySelector","parentElement","add","remove","threshold","querySelectorAll","section","observe","links","i","onfocus","onblur","length","DarkModeToggle","moon","className","control","onChange","defaultChecked","label","labelPlacement","React","Component","ContactForm","props","state","status","submitForm","bind","this","onSubmit","action","method","htmlFor","type","name","placeholder","ev","preventDefault","form","data","FormData","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","reset","setState","send","ReactDOM","render"],"mappings":"4QAMAA,SAASC,KAAKC,UAAUC,OAAO,eAG/BC,OAAOC,iBAAiB,oBAAoB,WAExC,IAGGC,EAAW,IAAIC,sBAAqB,SAAAC,GACzCA,EAAQC,SAAQ,SAAAC,GACf,IAAMC,EAAKD,EAAME,OAAOC,aAAa,MACjCH,EAAMI,kBAAoB,GAC7Bd,SAASe,cAAT,0BAA0CJ,EAA1C,OAAkDK,cAAcd,UAAUe,IAAI,UAE9EjB,SAASe,cAAT,0BAA0CJ,EAA1C,OAAkDK,cAAcd,UAAUgB,OAAO,eATnE,CACVC,UAAW,KAalBnB,SAASoB,iBAAiB,eAAeX,SAAQ,SAACY,GACjDf,EAASgB,QAAQD,SAQnB,IAFA,IAAIE,EAAQvB,SAASoB,iBAAiB,qB,WAE9BI,GACJD,EAAMC,GAAGC,QAAU,WAAOF,EAAMC,GAAGR,cAAcd,UAAUC,OAAO,YAClEoB,EAAMC,GAAGE,OAAS,WAAOH,EAAMC,GAAGR,cAAcd,UAAUC,OAAO,aAF7DqB,EAAI,EAAGA,EAAID,EAAMI,OAAQH,IAAM,EAA/BA,G,IAKFI,E,uKAEE,IAAMC,EAAO,uBAAGC,UAAU,eAC1B,OACI,6BACI,kBAAC,IAAD,CAAkBC,QAAS,kBAAC,IAAD,CAASC,SAAU,WAC1ChC,SAASC,KAAKC,UAAUC,OAAO,gBAC5B8B,gBAAc,IACjBC,MAAOL,EACPM,eAAe,e,GATNC,IAAMC,WAc7BC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,IAEZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALH,E,qDAOT,IACEF,EAAWG,KAAKJ,MAAhBC,OACR,OACI,0BAAMI,SAAUD,KAAKF,WAAYI,OAAO,kCAAkCC,OAAO,QAC7E,8DAAmC,6BAAK,8BAAM,mDAC9C,2BAAOC,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOC,KAAK,OAAOvC,GAAG,OAAOwC,YAAY,SACrD,2BAAOH,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQC,KAAK,QAAQvC,GAAG,QAAQwC,YAAY,UACxD,2BAAOH,QAAQ,WAAf,WACA,8BAAUE,KAAK,UAAUvC,GAAG,UAAUwC,YAAY,YACtC,YAAXV,EAAuB,sCAAiB,0CAC7B,UAAXA,GAAsB,4D,iCAIxBW,GAAK,IAAD,OACXA,EAAGC,iBACH,IAAMC,EAAOF,EAAGxC,OACV2C,EAAO,IAAIC,SAASF,GACpBG,EAAM,IAAIC,eAChBD,EAAIE,KAAKL,EAAKP,OAAQO,EAAKR,QAC3BW,EAAIG,iBAAiB,SAAU,oBAC/BH,EAAII,mBAAqB,WACnBJ,EAAIK,aAAeJ,eAAeK,OACnB,MAAfN,EAAIhB,QACNa,EAAKU,QACL,EAAKC,SAAS,CAAExB,OAAQ,aAExB,EAAKwB,SAAS,CAAExB,OAAQ,YAG5BgB,EAAIS,KAAKX,O,GAxCSnB,IAAMC,WA4ChC8B,IAASC,OAAO,kBAACxC,EAAD,MAAoB5B,SAASe,cAAc,oBAC3DoD,IAASC,OAAO,kBAAC9B,EAAD,MAAiBtC,SAASe,cAAc,mB","file":"static/js/main.0d0423bc.chunk.js","sourcesContent":["import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\ndocument.body.classList.toggle('light-theme');\r\n\r\n// observer for navbar links\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    let options = {\r\n        threshold: 0.5\r\n    }\r\n\tconst observer = new IntersectionObserver(entries => {\r\n\t\tentries.forEach(entry => {\r\n\t\t\tconst id = entry.target.getAttribute('id');\r\n\t\t\tif (entry.intersectionRatio > 0.5) {\r\n\t\t\t\tdocument.querySelector(`nav li a[href=\"#${id}\"]`).parentElement.classList.add('active');\r\n\t\t\t} else {\r\n\t\t\t\tdocument.querySelector(`nav li a[href=\"#${id}\"]`).parentElement.classList.remove('active');\r\n\t\t\t}\r\n\t\t});\r\n\t}, options);\r\n\r\n\tdocument.querySelectorAll('section[id]').forEach((section) => {\r\n\t\tobserver.observe(section);\r\n\t});\r\n\t\r\n});\r\n\r\n// make project links visible on tab focus\r\nlet links = document.querySelectorAll('.project-link > a');\r\n\r\nfor(let i = 0; i < links.length; i++) {\r\n    links[i].onfocus = () => {links[i].parentElement.classList.toggle('focused')};\r\n    links[i].onblur = () => {links[i].parentElement.classList.toggle('focused')};   \r\n}\r\n\r\nclass DarkModeToggle extends React.Component {\r\n    render() {\r\n        const moon = <i className=\"fa fa-moon\"></i>\r\n        return (\r\n            <div>\r\n                <FormControlLabel control={<Switch  onChange={() => {\r\n                    document.body.classList.toggle('light-theme');\r\n                    }} defaultChecked />}\r\n                    label={moon}\r\n                    labelPlacement=\"start\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass ContactForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: ''\r\n        };\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n    render() {\r\n        const { status } = this.state;\r\n        return (\r\n            <form onSubmit={this.submitForm} action=\"https://formspree.io/f/xleogqql\" method=\"POST\">\r\n                <h2>Interested in working together?<br/><span><b>Send me a message!</b></span></h2>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\"/>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" />\r\n                <label htmlFor=\"message\">Message</label>\r\n                <textarea name=\"message\" id=\"message\" placeholder=\"Message\" />\r\n                {status === \"SUCCESS\" ? <p>Thanks!</p> : <button>Submit</button>}\r\n                {status === \"ERROR\" && <p>Ooops! There was an error.</p>}\r\n            </form>\r\n        );\r\n    }\r\n    submitForm(ev) {\r\n        ev.preventDefault();\r\n        const form = ev.target;\r\n        const data = new FormData(form);\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(form.method, form.action);\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState !== XMLHttpRequest.DONE) return;\r\n          if (xhr.status === 200) {\r\n            form.reset();\r\n            this.setState({ status: \"SUCCESS\" });\r\n          } else {\r\n            this.setState({ status: \"ERROR\" });\r\n          }\r\n        };\r\n        xhr.send(data);\r\n    }\r\n}\r\n\r\nReactDOM.render(<DarkModeToggle />, document.querySelector('#darkmodetoggle'));\r\nReactDOM.render(<ContactForm />, document.querySelector('#contact-form'));"],"sourceRoot":""}